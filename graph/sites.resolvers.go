package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/jalavosus/matomogql/graph/model"
)

// GetSiteFromID is the resolver for the getSiteFromID field.
func (r *queryResolver) GetSiteFromID(ctx context.Context, idSite int) (*model.Site, error) {
	return r.matomoClient.GetSiteFromID(ctx, idSite)
}

// GetSitesFromID is the resolver for the getSitesFromID field.
func (r *queryResolver) GetSitesFromID(ctx context.Context, siteIDs []int) ([]*model.Site, error) {
	return r.matomoClient.GetSitesFromIDs(ctx, siteIDs...)
}

// GetSiteURLsFromID is the resolver for the getSiteURLsFromID field.
func (r *queryResolver) GetSiteURLsFromID(ctx context.Context, idSite int) ([]string, error) {
	return r.matomoClient.GetSiteURLsFromID(ctx, idSite)
}

// GetSitesWithViewAccess is the resolver for the getSitesWithViewAccess field.
func (r *queryResolver) GetSitesWithViewAccess(ctx context.Context) ([]*model.Site, error) {
	return r.matomoClient.GetSitesWithViewAccess(ctx)
}

// GetSitesWithAtLeastViewAccess is the resolver for the getSitesWithAtLeastViewAccess field.
func (r *queryResolver) GetSitesWithAtLeastViewAccess(ctx context.Context) ([]*model.Site, error) {
	return r.matomoClient.GetSitesWithAtLeastViewAccess(ctx)
}

// Goals is the resolver for the goals field.
func (r *siteResolver) Goals(ctx context.Context, obj *model.Site, opts *model.GetGoalsOptions) ([]*model.Goal, error) {
	return r.matomoClient.GetAllGoals(ctx, obj.IDSite, opts)
}

// LastVisits is the resolver for the lastVisits field.
func (r *siteResolver) LastVisits(ctx context.Context, obj *model.Site, opts *model.LastVisitsOpts) ([]*model.Visit, error) {
	return r.matomoClient.GetLastVisits(ctx, obj.IDSite, opts)
}

// Site returns SiteResolver implementation.
func (r *Resolver) Site() SiteResolver { return &siteResolver{r} }

type siteResolver struct{ *Resolver }
