package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/jalavosus/matomogql/graph/model"
)

// GetVisitorProfile is the resolver for the getVisitorProfile field.
func (r *queryResolver) GetVisitorProfile(
	ctx context.Context, idSite int, visitorID string,
) (*model.VisitorProfile, error) {
	return r.matomoClient.GetVisitorProfile(ctx, idSite, visitorID)
}

// GetVisitorProfiles is the resolver for the getVisitorProfiles field.
func (r *queryResolver) GetVisitorProfiles(
	ctx context.Context, idSite int, visitorIds []string,
) ([]*model.VisitorProfile, error) {
	return r.matomoClient.GetVisitorProfiles(ctx, idSite, visitorIds)
}

// FirstVisitFull is the resolver for the firstVisitFull field.
func (r *visitorProfileResolver) FirstVisitFull(ctx context.Context, obj *model.VisitorProfile) (*model.Visit, error) {
	return r.getVisitBySortOrder(obj, model.OrderByAsc)
}

// LastVisitFull is the resolver for the lastVisitFull field.
func (r *visitorProfileResolver) LastVisitFull(ctx context.Context, obj *model.VisitorProfile) (*model.Visit, error) {
	return r.getVisitBySortOrder(obj, model.OrderByDesc)
}

// LastVisits is the resolver for the lastVisits field.
func (r *visitorProfileResolver) LastVisits(
	ctx context.Context, obj *model.VisitorProfile, orderBy *model.OrderByOptions, limit *int,
) ([]*model.Visit, error) {
	if obj == nil {
		return nil, nil
	}

	obj.LastVisits = orderLastVisits(obj.LastVisits, orderBy)

	if limit != nil && *limit > 0 {
		obj.LastVisits = obj.LastVisits[:*limit]
	}

	return obj.LastVisits, nil
}

// VisitorProfile returns VisitorProfileResolver implementation.
func (r *Resolver) VisitorProfile() VisitorProfileResolver { return &visitorProfileResolver{r} }

type visitorProfileResolver struct{ *Resolver }
