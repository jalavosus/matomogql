package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"strconv"
	"strings"

	"github.com/jalavosus/matomogql/graph/loaders"
	"github.com/jalavosus/matomogql/graph/model"
)

// ConversionRate is the resolver for the conversionRate field.
func (r *ecommerceGoalResolver) ConversionRate(ctx context.Context, obj *model.EcommerceGoal) (float64, error) {
	raw := strings.ReplaceAll(obj.ConversionRatePercent, "%", "")
	return strconv.ParseFloat(raw, 64)
}

// ConvertedVisits is the resolver for the convertedVisits field.
func (r *ecommerceGoalResolver) ConvertedVisits(ctx context.Context, obj *model.EcommerceGoal, opts *model.ConvertedVisitsOptions, orderBy *model.OrderByOptions) ([]*model.Visit, error) {
	segment := "visitConvertedGoalId==ecommerceOrder;" + obj.Segment
	return loaders.GetGoalConvertedVisits(ctx, obj.IDSite, "", segment, opts, orderBy)
}

// GetEcommerceGoalsName is the resolver for the getEcommerceGoalsName field.
func (r *queryResolver) GetEcommerceGoalsName(ctx context.Context, idSite int, opts model.GetEcommerceGoalsOptions) ([]*model.EcommerceGoal, error) {
	return r.matomoClient.GetEcommerceItemsName(ctx, idSite, &opts)
}

// GetEcommerceGoalsSku is the resolver for the getEcommerceGoalsSku field.
func (r *queryResolver) GetEcommerceGoalsSku(ctx context.Context, idSite int, opts model.GetEcommerceGoalsOptions) ([]*model.EcommerceGoal, error) {
	return r.matomoClient.GetEcommerceItemsSku(ctx, idSite, &opts)
}

// EcommerceGoal returns EcommerceGoalResolver implementation.
func (r *Resolver) EcommerceGoal() EcommerceGoalResolver { return &ecommerceGoalResolver{r} }

type ecommerceGoalResolver struct{ *Resolver }
